base_filepath = C:\Users\aaron\Projects\G\latest\G\src\bootstrap\self-bootstrap\pg-self-bootstrap-lg-pg\pg
basename = pg
className = pgLexer
lineDirectives = 1
header = {

		#include <iostream>
		#include "g/Grammar/Grammar.h"
		#include "g/CodeBlock.h"
		#include "g/Actions.h"
		#include "nonstd/Utils.h"
		#include "pg.pg.h"

//		extern Grammar*	grammar;	// TODO: fold in and remove !!!

		enum MODE { NORMAL, CODE_BLOCK, PRODUCTIONS };
	
}
code = {

		std::string action;
		std::string stringLiteral;

		int yyfnln;
		int curley_braces = 0;
		MODE bracket_mode = MODE::NORMAL;
	
}
diagnostics = 205
compressed = 1
debug = 0
lexicalMachine:LexicalMachine = {
diagnostics = 0
compressed = 1
debug = 0
name = LG
className = pgLexer
baseClassName = Runtime::Lexer
rootTypeName = ContextFreeGrammar
baseClass = Lexer
valueType = ValueType
returnType = int
equivalenceClasses = { 0, 9, 10, 11, 13, 14, 32, 33, 34, 35, 36, 37, 39, 40, 42, 43, 47, 48, 56, 58, 59, 60, 61, 62, 63, 64, 65, 71, 88, 89, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126}

startContextName = INITIAL
contexts = [
    {
        name = INITIAL
        className = INITIAL
        compressed = 1
        regularGrammar = Selection(Selection(Selection(Selection(Selection(Selection(Selection(Selection(Sequence(Sequence(Sequence(Sequence(Sequence(Sequence(Sequence(CharacterClass('g'), CharacterClass('r')), CharacterClass('a')), CharacterClass('m')), CharacterClass('m')), CharacterClass('a')), CharacterClass('r')), End(7, <empty>)), Sequence(Sequence(CharacterClass('[Range(65, 90)_Range(97, 122)]'), Kleene(CharacterClass('[Range(48, 57)Range(65, 90)_Range(97, 122)]'))), End(10, <empty>))), Sequence(CharacterClass('"'), End(12, <empty>))), Sequence(CharacterClass('{'), End(14, <empty>))), Sequence(Sequence(CharacterClass('/'), CharacterClass('*')), End(17, <empty>))), Sequence(Sequence(CharacterClass('/'), CharacterClass('/')), End(20, <empty>))), Sequence(Sequence(CharacterClass('[\x9 ]'), Kleene(CharacterClass('[\x9 ]'))), End(23, <empty>))), Sequence(Sequence(Optional(CharacterClass('\xd')), CharacterClass('\xa')), End(26, <empty>))), Sequence(CharacterClass('[^\xa\xd]'), End(28, <empty>)))
        positionToSet = {
            0 = 0
            1 = 1
            2 = 2
            3 = 3
            4 = 4
            5 = 5
            6 = 6
            7 = 0
            8 = 7
            9 = 8
            10 = 0
            11 = 9
            12 = 0
            13 = 10
            14 = 0
            15 = 11
            16 = 12
            17 = 0
            18 = 13
            19 = 14
            20 = 0
            21 = 15
            22 = 16
            23 = 0
            24 = 17
            25 = 18
            26 = 0
            27 = 19
            28 = 0
        }
    }
    {
        name = GRAMMAR
        className = GRAMMAR
        compressed = 1
        regularGrammar = Selection(Selection(Selection(Selection(Selection(Selection(Selection(Selection(Selection(Selection(Selection(Selection(Selection(Selection(Selection(Selection(Selection(Selection(Selection(Selection(Selection(Selection(Selection(Selection(Selection(Selection(Selection(Selection(Selection(Selection(Selection(Sequence(Sequence(Sequence(Sequence(CharacterClass('t'), CharacterClass('e')), CharacterClass('r')), CharacterClass('m')), End(4, <empty>)), Sequence(Sequence(Sequence(Sequence(Sequence(Sequence(Sequence(CharacterClass('n'), CharacterClass('o')), CharacterClass('n')), CharacterClass('t')), CharacterClass('e')), CharacterClass('r')), CharacterClass('m')), End(12, <empty>))), Sequence(Sequence(Sequence(Sequence(Sequence(CharacterClass('s'), CharacterClass('t')), CharacterClass('a')), CharacterClass('r')), CharacterClass('t')), End(18, <empty>))), Sequence(Sequence(Sequence(Sequence(Sequence(Sequence(Sequence(Sequence(Sequence(Sequence(CharacterClass('p'), CharacterClass('r')), CharacterClass('o')), CharacterClass('d')), CharacterClass('u')), CharacterClass('c')), CharacterClass('t')), CharacterClass('i')), CharacterClass('o')), CharacterClass('n')), End(29, <empty>))), Sequence(Sequence(Sequence(Sequence(CharacterClass('c'), CharacterClass('o')), CharacterClass('d')), CharacterClass('e')), End(34, <empty>))), Sequence(Sequence(Sequence(Sequence(Sequence(Sequence(CharacterClass('h'), CharacterClass('e')), CharacterClass('a')), CharacterClass('d')), CharacterClass('e')), CharacterClass('r')), End(41, <empty>))), Sequence(Sequence(Sequence(Sequence(Sequence(Sequence(Sequence(Sequence(CharacterClass('r'), CharacterClass('o')), CharacterClass('o')), CharacterClass('t')), CharacterClass('t')), CharacterClass('y')), CharacterClass('p')), CharacterClass('e')), End(50, <empty>))), Sequence(Sequence(Sequence(Sequence(Sequence(Sequence(Sequence(Sequence(Sequence(CharacterClass('b'), CharacterClass('a')), CharacterClass('s')), CharacterClass('e')), CharacterClass('c')), CharacterClass('l')), CharacterClass('a')), CharacterClass('s')), CharacterClass('s')), End(60, <empty>))), Sequence(Sequence(Sequence(Sequence(Sequence(Sequence(Sequence(Sequence(CharacterClass('b'), CharacterClass('a')), CharacterClass('s')), CharacterClass('e')), CharacterClass('t')), CharacterClass('y')), CharacterClass('p')), CharacterClass('e')), End(69, <empty>))), Sequence(Sequence(Sequence(Sequence(Sequence(Sequence(Sequence(Sequence(Sequence(Sequence(CharacterClass('r'), CharacterClass('e')), CharacterClass('t')), CharacterClass('u')), CharacterClass('r')), CharacterClass('n')), CharacterClass('t')), CharacterClass('y')), CharacterClass('p')), CharacterClass('e')), End(80, <empty>))), Sequence(Sequence(Sequence(Sequence(Sequence(CharacterClass('u'), CharacterClass('n')), CharacterClass('i')), CharacterClass('o')), CharacterClass('n')), End(86, <empty>))), Sequence(Sequence(Sequence(Sequence(Sequence(Sequence(Sequence(Sequence(CharacterClass('n'), CharacterClass('o')), CharacterClass('n')), CharacterClass('a')), CharacterClass('s')), CharacterClass('s')), CharacterClass('o')), CharacterClass('c')), End(95, <empty>))), Sequence(Sequence(Sequence(Sequence(CharacterClass('l'), CharacterClass('e')), CharacterClass('f')), CharacterClass('t')), End(100, <empty>))), Sequence(Sequence(Sequence(Sequence(Sequence(CharacterClass('r'), CharacterClass('i')), CharacterClass('g')), CharacterClass('h')), CharacterClass('t')), End(106, <empty>))), Sequence(Sequence(Sequence(Sequence(Sequence(Sequence(Sequence(CharacterClass('e'), CharacterClass('p')), CharacterClass('s')), CharacterClass('i')), CharacterClass('l')), CharacterClass('o')), CharacterClass('n')), End(114, <empty>))), Sequence(CharacterClass(':'), End(116, <empty>))), Sequence(Sequence(CharacterClass('[Range(65, 90)_Range(97, 122)]'), Kleene(CharacterClass('[Range(48, 57)Range(65, 90)_Range(97, 122)]'))), End(119, <empty>))), Sequence(CharacterClass('"'), End(121, <empty>))), Sequence(CharacterClass('$'), End(123, <empty>))), Sequence(CharacterClass('='), End(125, <empty>))), Sequence(CharacterClass('|'), End(127, <empty>))), Sequence(CharacterClass(':'), End(129, <empty>))), Sequence(CharacterClass(';'), End(131, <empty>))), Sequence(Sequence(CharacterClass('[Range(65, 90)_Range(97, 122)]'), Kleene(CharacterClass('[Range(48, 57)Range(65, 90)_Range(97, 122)]'))), End(134, <empty>))), Sequence(CharacterClass('"'), End(136, <empty>))), Sequence(CharacterClass('{'), End(138, <empty>))), Sequence(CharacterClass('}'), End(140, <empty>))), Sequence(Sequence(CharacterClass('/'), CharacterClass('*')), End(143, <empty>))), Sequence(Sequence(CharacterClass('/'), CharacterClass('/')), End(146, <empty>))), Sequence(Sequence(CharacterClass('[\x9 ]'), Kleene(CharacterClass('[\x9 ]'))), End(149, <empty>))), Sequence(Sequence(Optional(CharacterClass('\xd')), CharacterClass('\xa')), End(152, <empty>))), Sequence(CharacterClass('[^\xa\xd]'), End(154, <empty>)))
        positionToSet = {
            0 = 20
            1 = 21
            2 = 22
            3 = 23
            4 = 0
            5 = 24
            6 = 25
            7 = 26
            8 = 27
            9 = 28
            10 = 29
            11 = 30
            12 = 0
            13 = 31
            14 = 32
            15 = 33
            16 = 34
            17 = 35
            18 = 0
            19 = 36
            20 = 37
            21 = 38
            22 = 39
            23 = 40
            24 = 41
            25 = 42
            26 = 43
            27 = 44
            28 = 45
            29 = 0
            30 = 46
            31 = 47
            32 = 48
            33 = 49
            34 = 0
            35 = 50
            36 = 51
            37 = 52
            38 = 53
            39 = 54
            40 = 55
            41 = 0
            42 = 56
            43 = 57
            44 = 58
            45 = 59
            46 = 60
            47 = 61
            48 = 62
            49 = 63
            50 = 0
            51 = 64
            52 = 65
            53 = 66
            54 = 67
            55 = 68
            56 = 69
            57 = 70
            58 = 71
            59 = 72
            60 = 0
            61 = 73
            62 = 74
            63 = 75
            64 = 76
            65 = 77
            66 = 78
            67 = 79
            68 = 80
            69 = 0
            70 = 81
            71 = 82
            72 = 83
            73 = 84
            74 = 85
            75 = 86
            76 = 87
            77 = 88
            78 = 89
            79 = 90
            80 = 0
            81 = 91
            82 = 92
            83 = 93
            84 = 94
            85 = 95
            86 = 0
            87 = 96
            88 = 97
            89 = 98
            90 = 99
            91 = 100
            92 = 101
            93 = 102
            94 = 103
            95 = 0
            96 = 104
            97 = 105
            98 = 106
            99 = 107
            100 = 0
            101 = 108
            102 = 109
            103 = 110
            104 = 111
            105 = 112
            106 = 0
            107 = 113
            108 = 114
            109 = 115
            110 = 116
            111 = 117
            112 = 118
            113 = 119
            114 = 0
            115 = 120
            116 = 0
            117 = 121
            118 = 122
            119 = 0
            120 = 123
            121 = 0
            122 = 124
            123 = 0
            124 = 125
            125 = 0
            126 = 126
            127 = 0
            128 = 127
            129 = 0
            130 = 128
            131 = 0
            132 = 129
            133 = 130
            134 = 0
            135 = 131
            136 = 0
            137 = 132
            138 = 0
            139 = 133
            140 = 0
            141 = 134
            142 = 135
            143 = 0
            144 = 136
            145 = 137
            146 = 0
            147 = 138
            148 = 139
            149 = 0
            150 = 140
            151 = 141
            152 = 0
            153 = 142
            154 = 0
        }
    }
    {
        name = LEX_STRING_LITERAL
        className = LEX_STRING_LITERAL
        compressed = 1
        regularGrammar = Selection(Sequence(CharacterClass('"'), End(1, <empty>)), Sequence(CharacterClass('[^\xa\xd]'), End(3, <empty>)))
        positionToSet = {
            0 = 143
            1 = 0
            2 = 144
            3 = 0
        }
    }
    {
        name = ACTION
        className = ACTION
        compressed = 1
        regularGrammar = Selection(Selection(Selection(Selection(Selection(Selection(Sequence(CharacterClass('{'), End(1, <empty>)), Sequence(CharacterClass('}'), End(3, <empty>))), Sequence(CharacterClass('"'), End(5, <empty>))), Sequence(Sequence(Sequence(CharacterClass('''), Sequence(CharacterClass('\'), Selection(Selection(Sequence(CharacterClass('[Range(48, 55)]'), Kleene(CharacterClass('[Range(48, 55)]'))), Sequence(CharacterClass('[Xx]'), Sequence(CharacterClass('[Range(48, 57)Range(65, 70)Range(97, 102)]'), Kleene(CharacterClass('[Range(48, 57)Range(65, 70)Range(97, 102)]'))))), CharacterClass('\xa')))), CharacterClass(''')), End(15, <empty>))), Sequence(Sequence(Sequence(CharacterClass('''), CharacterClass('[^\xa\xd]')), CharacterClass(''')), End(19, <empty>))), Sequence(Sequence(Optional(CharacterClass('\xd')), CharacterClass('\xa')), End(22, <empty>))), Sequence(CharacterClass('[^\xa\xd]'), End(24, <empty>)))
        positionToSet = {
            0 = 145
            1 = 0
            2 = 146
            3 = 0
            4 = 147
            5 = 0
            6 = 148
            7 = 149
            8 = 150
            9 = 151
            10 = 152
            11 = 153
            12 = 154
            13 = 155
            14 = 156
            15 = 0
            16 = 157
            17 = 158
            18 = 159
            19 = 0
            20 = 160
            21 = 161
            22 = 0
            23 = 162
            24 = 0
        }
    }
    {
        name = CODE
        className = CODE
        compressed = 1
        regularGrammar = Selection(Selection(Selection(Selection(Selection(Selection(Sequence(CharacterClass('{'), End(1, <empty>)), Sequence(CharacterClass('}'), End(3, <empty>))), Sequence(CharacterClass('"'), End(5, <empty>))), Sequence(Sequence(Sequence(CharacterClass('''), Sequence(CharacterClass('\'), Selection(Selection(Sequence(CharacterClass('[Range(48, 55)]'), Kleene(CharacterClass('[Range(48, 55)]'))), Sequence(CharacterClass('[Xx]'), Sequence(CharacterClass('[Range(48, 57)Range(65, 70)Range(97, 102)]'), Kleene(CharacterClass('[Range(48, 57)Range(65, 70)Range(97, 102)]'))))), CharacterClass('\xa')))), CharacterClass(''')), End(15, <empty>))), Sequence(Sequence(Sequence(CharacterClass('''), CharacterClass('[^\xa\xd]')), CharacterClass(''')), End(19, <empty>))), Sequence(Sequence(Optional(CharacterClass('\xd')), CharacterClass('\xa')), End(22, <empty>))), Sequence(CharacterClass('[^\xa\xd]'), End(24, <empty>)))
        positionToSet = {
            0 = 163
            1 = 0
            2 = 164
            3 = 0
            4 = 165
            5 = 0
            6 = 166
            7 = 167
            8 = 168
            9 = 169
            10 = 170
            11 = 171
            12 = 172
            13 = 173
            14 = 174
            15 = 0
            16 = 175
            17 = 176
            18 = 177
            19 = 0
            20 = 178
            21 = 179
            22 = 0
            23 = 180
            24 = 0
        }
    }
    {
        name = ACTION_DOUBLE_QUOTED_STRING
        className = ACTION_DOUBLE_QUOTED_STRING
        compressed = 1
        regularGrammar = Selection(Selection(Sequence(CharacterClass('"'), End(1, <empty>)), Sequence(CharacterClass('\'), End(3, <empty>))), Sequence(CharacterClass('[^\xa\xd]'), End(5, <empty>)))
        positionToSet = {
            0 = 181
            1 = 0
            2 = 182
            3 = 0
            4 = 183
            5 = 0
        }
    }
    {
        name = ACTION_DOUBLE_QUOTED_STRING_ESCAPE_SEQUENCE
        className = ACTION_DOUBLE_QUOTED_STRING_ESCAPE_SEQUENCE
        compressed = 1
        regularGrammar = Selection(Selection(Selection(Selection(Selection(Selection(Selection(Selection(Selection(Selection(Selection(Selection(Selection(Sequence(Sequence(CharacterClass('[Xx]'), Sequence(CharacterClass('[Range(48, 57)Range(65, 70)Range(97, 102)]'), Kleene(CharacterClass('[Range(48, 57)Range(65, 70)Range(97, 102)]')))), End(3, <empty>)), Sequence(Sequence(CharacterClass('[Range(48, 55)]'), Kleene(CharacterClass('[Range(48, 55)]'))), End(6, <empty>))), Sequence(CharacterClass('a'), End(8, <empty>))), Sequence(CharacterClass('b'), End(10, <empty>))), Sequence(CharacterClass('f'), End(12, <empty>))), Sequence(CharacterClass('n'), End(14, <empty>))), Sequence(CharacterClass('r'), End(16, <empty>))), Sequence(CharacterClass('t'), End(18, <empty>))), Sequence(CharacterClass('v'), End(20, <empty>))), Sequence(CharacterClass('\'), End(22, <empty>))), Sequence(CharacterClass('''), End(24, <empty>))), Sequence(CharacterClass('"'), End(26, <empty>))), Sequence(CharacterClass('?'), End(28, <empty>))), Sequence(CharacterClass('[^\xa\xd]'), End(30, <empty>)))
        positionToSet = {
            0 = 184
            1 = 185
            2 = 186
            3 = 0
            4 = 187
            5 = 188
            6 = 0
            7 = 189
            8 = 0
            9 = 190
            10 = 0
            11 = 191
            12 = 0
            13 = 192
            14 = 0
            15 = 193
            16 = 0
            17 = 194
            18 = 0
            19 = 195
            20 = 0
            21 = 196
            22 = 0
            23 = 197
            24 = 0
            25 = 198
            26 = 0
            27 = 199
            28 = 0
            29 = 200
            30 = 0
        }
    }
    {
        name = COMMENT
        className = COMMENT
        compressed = 1
        regularGrammar = Selection(Selection(Sequence(Sequence(CharacterClass('*'), CharacterClass('/')), End(2, <empty>)), Sequence(Sequence(Optional(CharacterClass('\xd')), CharacterClass('\xa')), End(5, <empty>))), Sequence(CharacterClass('[^\xa\xd]'), End(7, <empty>)))
        positionToSet = {
            0 = 201
            1 = 202
            2 = 0
            3 = 203
            4 = 204
            5 = 0
            6 = 205
            7 = 0
        }
    }
    {
        name = SINGLE_LINE_COMMENT
        className = SINGLE_LINE_COMMENT
        compressed = 1
        regularGrammar = Selection(Sequence(Sequence(Optional(CharacterClass('\xd')), CharacterClass('\xa')), End(2, <empty>)), Sequence(CharacterClass('[^\xa\xd]'), End(4, <empty>)))
        positionToSet = {
            0 = 206
            1 = 207
            2 = 0
            3 = 208
            4 = 0
        }
    }
]
columnMap = 0159DD70
}
